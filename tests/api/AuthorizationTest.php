<?php

namespace KeycloakBundle\Tests\api;

use Faker\Factory;
use Faker\Generator;
use KeycloakBundle\Keycloak\DTO\Common\Collections\Realization\Credentials;
use KeycloakBundle\Keycloak\DTO\Common\Credential\Realization\Password;
use KeycloakBundle\Keycloak\DTO\Common\Email;
use KeycloakBundle\Keycloak\DTO\Common\Name;
use KeycloakBundle\Keycloak\DTO\Common\Username;
use KeycloakBundle\Keycloak\DTO\Common\Uuid4;
use KeycloakBundle\Keycloak\DTO\User\Request\SignUp\Realization\UserRepresentation;
use KeycloakBundle\Keycloak\UseCase\Authorization\Realization\AuthorizationManager;
use KeycloakBundle\Tests\KeycloakTestingKernel;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpKernel\KernelInterface;

class AuthorizationTest extends TestCase
{
    private UserRepresentation $registeredUser;
    private Generator $faker;
    private KernelInterface $kernel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->kernel = new KeycloakTestingKernel([
            'http_client' => [
                'base_uri' => $_ENV['KEYCLOAK_AUTH_URL']
            ],
            'realms' => [
                'test_realm' => [
                    'realmName' => $_ENV['KEYCLOAK_REALM'],
                    'connections' => [
                        'firstStub' => [
                            'clientId' => $_ENV['KEYCLOAK_CLIENT_ID'],
                            'clientSecret' => $_ENV['KEYCLOAK_CLIENT_SECRET'],
                            'admin' => false
                        ],
                        'secondStub' => [
                            'clientId' => $_ENV['KEYCLOAK_ADMIN_CLIENT_ID'],
                            'clientSecret' => $_ENV['KEYCLOAK_ADMIN_CLIENT_SECRET'],
                            'admin' => true
                        ]
                    ]
                ]
            ]
        ]);

        $this->kernel->boot();

        $this->faker = Factory::create();
    }

    public function testSignUp()
    {
        $container = $this->kernel->getContainer();

        $authorizationManager = $container->get(AuthorizationManager::class);
        self::assertInstanceOf(AuthorizationManager::class, $authorizationManager);

        $this->registeredUser = new UserRepresentation(
            Uuid4::fromString($this->faker->uuid),
            new Username($this->faker->userName),
            new Email($this->faker->email),
            new Credentials([new Password($this->faker->password, false)]),
            true,
            new Name($this->faker->firstName, $this->faker->lastName)
        );

        $result = $authorizationManager->signUp($this->registeredUser);
        self::assertFalse($result);
    }


}